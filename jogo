<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogo de Mem√≥ria</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="memory-game">
        <div class="memory-card" data-framework="a">
            <img class="front-face" src="img/a.jpg" alt="Card A">
            <img class="back-face" src="img/back.jpg" alt="Back of Card">
        </div>
        <!-- Repetir para mais cartas -->
        <!-- Exemplo com mais cartas -->
        <div class="memory-card" data-framework="b">
            <img class="front-face" src="img/b.jpg" alt="Card B">
            <img class="back-face" src="img/back.jpg" alt="Back of Card">
        </div>
        <!-- Mais cartas aqui -->
    </div>

    <script src="script.js"></script>
</body>
</html>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f0f0f0;
    margin: 0;
    font-family: Arial, sans-serif;
}

.memory-game {
    width: 640px;
    display: flex;
    flex-wrap: wrap;
    perspective: 1000px;
}

.memory-card {
    width: calc(25% - 20px);
    margin: 10px;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.5s;
}

.memory-card:active {
    transform: rotateY(180deg);
}

.front-face,
.back-face {
    width: 100%;
    height: 100%;
    position: absolute;
    backface-visibility: hidden;
}

.front-face {
    transform: rotateY(180deg);
}

.back-face {
    transform: rotateY(0deg);
}

img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
}
const cards = document.querySelectorAll('.memory-card');

let hasFlippedCard = false;
let lockBoard = false;
let firstCard, secondCard;

function flipCard() {
    if (lockBoard) return;
    if (this === firstCard) return;

    this.classList.add('flip');

    if (!hasFlippedCard) {
        // first click
        hasFlippedCard = true;
        firstCard = this;
        return;
    }

    // second click
    secondCard = this;
    checkForMatch();
}

function checkForMatch() {
    let isMatch = firstCard.dataset.framework === secondCard.dataset.framework;

    isMatch ? disableCards() : unflipCards();
}

function disableCards() {
    firstCard.removeEventListener('click', flipCard);
    secondCard.removeEventListener('click', flipCard);

    resetBoard();
}

function unflipCards() {
    lockBoard = true;

    setTimeout(() => {
        firstCard.classList.remove('flip');
        secondCard.classList.remove('flip');

        resetBoard();
    }, 1000);
}

function resetBoard() {
    [hasFlippedCard, lockBoard] = [false, false];
    [firstCard, secondCard] = [null, null];
}

(function shuffle() {
    cards.forEach(card => {
        let randomPos = Math.floor(Math.random() * 12);
        card.style.order = randomPos;
    });
})();

cards.forEach(card => card.addEventListener('click', flipCard));
